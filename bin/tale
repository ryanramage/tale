#!/usr/bin/env node

var fs = require('fs'),
    url = require('url'),
    path = require('path'),
    http = require('http'),
    glob = require('glob'),
    open = require('open'),
    read = require('read'),
    async = require('async'),
    mkdirp = require('mkdirp'),
    connect = require('connect'),
    request = require('request'),
    init = require('init-package-json'),
    packager = require('../lib/packager'),
    find_root = require('../lib/find-root'),
    FileStore = require('../lib/file-store'),
    argv = require('minimist')(process.argv.slice(2)),
    portrange = 45032;

if (argv._.length === 0) package();
if (argv._[0] === 'package') package();
if (argv._[0] === 'init') initialize();
if (argv._[0] === 'serve') serve();
if (argv._[0] === 'publish') publish();

function package(){
  var dir = argv.i || find_root('.');
  var story_dir = argv.o || path.resolve(dir, './build'),
      proof_dir = argv.p || path.resolve(dir, './proofs'),
      fs = FileStore(path.normalize(story_dir), path.normalize(proof_dir), {
        js_in_manifest:   argv.no_js_in_manifest || true,
        write_index_html: argv.no_index_html || true,
        write_tale_js:    argv.no_tale_js || true
      });

  packager( path.normalize(dir), fs, function(err, graph){
    if (err) return console.error("Error:", err);
    console.log("Story ID: ", graph.id);
  })
}

function publish() {
  var dir = argv.i || find_root('.'),
      build_dir = argv.o || path.resolve(dir, './build'),
      proof_file = argv.p || path.resolve(dir, './proofs/proofs.json'),
      dest = argv._[1] || "http://t4.io",
      endpoint = url.resolve(dest, '/publish');

  var has_proofs = null;
  try { has_proofs = fs.statSync(proof_file) } catch(e){}

  glob('**/*', {cwd: build_dir, mark: true }, function(err, files){
    var r = request.post(endpoint, function(err, resp, body){
      if (err) return console.error("Upload Failed: ", err);
      var resp = JSON.parse(body);
      var location = url.resolve(dest, resp.id) + '/';

      if (resp.msg) console.log('Server message: ', resp.msg);
      console.log('Upload success, available at:');
      console.log(location);
    })
    var form = r.form()
    if (has_proofs){
      form.append('proofs.json', fs.createReadStream(proof_file));
    }
    for (var i=0; i<files.length; i++){
      var file = files[i];
      if (! /\/$/.test(file)) { // ignore directories (ending in / )
        form.append(files[i], fs.createReadStream(path.join(build_dir, files[i])));
      }
    }
  })
}


function initialize() {
  var dir = process.cwd();
  var initFile = require.resolve('../lib/basic-init.js')
  init(dir, initFile, function (err, data) {
    if (err) return console.error('could not write package.json');

    read({prompt: "Number of chapters to create? ", default: "2" }, function (err, num) {
      if (err) return console.error('I did not understand that.');
      var num_chapters = Number(num);
      async.times(num_chapters, function(n, cb){
        var human = n + 1;
        var end = (human == num_chapters);
        writeChapter(human, end, dir, cb);
      }, function(err){
        console.log('done.');
      })
    })

  })
}


function writeChapter(number, end, dir, cb){
  var chapter = {
    "type": "text",
    "text" : "Once upon a time....",
    "next_folder": {}
  }, next_folder = {
    "clue": "What is the password?",
    "pass": "password"
  };

  if (end) {
    chapter.text = "The End. Fin."
    chapter.end_link = "http://place.com/whats_next"
  } else {
    chapter.next_folder[ 'chapter' + (number + 1) ] = next_folder;
  }
  var chapter_dir = path.resolve(dir, 'chapter' + number);
  mkdirp.sync( chapter_dir );
  fs.writeFile( path.resolve(chapter_dir, 'chapter.json') , JSON.stringify(chapter,null, 4), cb);
}


function serve() {
  var dir = argv.i || find_root('.'),
      out_dir = argv.o || path.resolve(dir, './build'),
      middleware = []
      portrange = argv._[1] || portrange;


  if (!argv.offline) {
    middleware.push(function(req, resp, next){
      if (req.url == '/story.appcache') {
        resp.writeHead(404, {});
        return resp.end();
      }
      next();
    });
  }
  middleware.push(function(req, resp, next){
      if (req.url == '/api') {
        resp.write(JSON.stringify({ok: true}));
        return resp.end();
      }
      if (req.url == '/time') {
        resp.write(JSON.stringify({ok: true, time_ms: 10000}));
        return resp.end();
      }
      next();
  })


  middleware.push( connect.static(path.resolve(out_dir)  ));
  middleware.push(connect.directory(  path.resolve(out_dir)  ))
  var app = connect.apply(null, middleware);

  getPort(app, function(port){

    server
      .listen(port, null)
      .on('listening', function() {
        console.log('server running: ', 'http://localhost:' + port);
        if (argv.b) open('http://localhost:' + port)
      })

  })
}

function getPort (app, cb) {
  var port = portrange
  portrange += 1;

  server = http.createServer(app)
  server.listen(port, function (err) {
    server.once('close', function () {
      cb(port)
    })
    server.close()
  })
  server.on('error', function (err) {
    getPort(app, cb)
  })
}
